for dense matrix multiplication
    for i to n:   -------------> n flops
        for j to n: -----------> n flops
            for k to n:--------> n flops
                one addition operation and one multiplication (1+1) flops
2*n^3 flops
-------------------------------------------------------
Banded matrix multiplication:

storage complexity: band matrix is (p+q+1)xn where
p and q are lower bandwidth and upper bandwidth
bandwidth=p+q+1
total storage=(bandwidth)*n
I've applied 
-------------------------------------------------------
Cordinate storage format:
since we required to store 3 arrays:
1) row indices : n (n:number of nonzero elements)
2) column indices: n (n:number of nonzero elements)
3) value indices: n (n:number of nonzero elements) 

So total storage n+n+n=3*n

complexity:

 Addition operation traverses the matrices linearly:O(n),
     where n is NZ elements elements in the larger matrix amongst the two.
Transpose has a time complexity of O(n+m), 
     n :number of columns
     m :number of non-zero elements in the matrix.
     Multiplication:O(p*n + q*m), 
        (p,m) :number of columns and terms in the second matrix; 
        (q,n) : number of rows and terms in the first matrix.

-----------------------------------------------
CSR Matrix multiplication:

 For storage: 
    row pointers:n+1 (n:no of of nonzero,for row_pointer array)
    columns: n ( n is number of Non zero elements)
    values: n (n is number of nonzero elements)
    total storage=n+n+n+1=3*n+1
complexity= O(n^3) flops